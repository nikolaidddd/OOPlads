import javax.swing.*;import java.awt.*;import java.awt.event.*;public class Start {    private JFrame f = new JFrame("Лабораторная работа №6");    private JButton but0 = new JButton("Назад");    private JButton but1 = new JButton("Окружности");    private JButton but2 = new JButton("Четырехугольники");    private JButton but3 = new JButton("Окружность");    private JButton but4 = new JButton("Эллипс");    private JButton but5 = new JButton("Четырехугольник");    private JButton but6 = new JButton("Прямоугольник");    private JButton but7 = new JButton("Ромб");    private JButton but8 = new JButton("Трапециия");    private JButton but9 = new JButton("Создать");    private JButton but10 = new JButton("Переместить");    private JButton but11 = new JButton("Удалить");    private JButton but13 = new JButton("Изменить радиус");    private JButton but14 = new JButton("Повернуть на 90");    private JButton but15 = new JButton("Изменить размер");    private JButton but16 = new JButton("Массив");    private JButton but17 = new JButton("Показать");    private JButton but18 = new JButton("Стереть");    private JButton but19 = new JButton("Уничтожить");    private JButton but20 = new JButton("Подиерархии");    private JButton but21 = new JButton("Контейнер");    private JButton but22 = new JButton("На базе динамического массива");    private JButton but23 = new JButton("На базе линейного динамического списка");    private JButton but24 = new JButton("Добавить");    private JPanel cP = centerPanel();    private JPanel sP = southPanel();    private JPanel circle = null;    private TCircle [] circles = null;    private JPanel ellipse = null;    private JPanel quadrangle = null;    private JPanel rectangle = null;    private TRectangle [] rectangles = null;    private JPanel romb = null;    private JPanel trapeze = null;    private JPanel[] massive = null;    private JLabel text = null;    private ContMassive MassCont = null;    private ContList ListCont = null;    private int i, iL, numbut, numbut2, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8 = 0;    private int fig_to_move;    private int counterMassive, counterList;    private Start() {                                   //создаем основное окно        f.setLayout(new BorderLayout());        f.setSize(1280,680);        f.add(cP, BorderLayout.CENTER);        f.add(sP, BorderLayout.SOUTH);        //обработчик клавиш        f.addKeyListener(new KeyAdapter() {//            @Override            public void keyPressed(KeyEvent e) {                switch (e.getKeyCode()) {                    case KeyEvent.VK_UP:                        MoveMassive(0,-10);                        break;                    case KeyEvent.VK_DOWN:                        MoveMassive(0,10);                        break;                    case KeyEvent.VK_LEFT:                        MoveMassive(-10,0);                        break;                    case KeyEvent.VK_RIGHT:                        MoveMassive(10,0);                        break;                }            }        });        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        f.setVisible(true);    }    //панель с рисунками    private JPanel centerPanel () {        JPanel p = new JPanel();        p.setLayout(new BorderLayout());        p.setBackground(Color.white);        return p;    }    //панель с кнопками    private JPanel southPanel () {        JPanel p = new JPanel();        p.setLayout(new FlowLayout());        p.setBackground(Color.GRAY);        p.add(but1);        p.add(but2);        p.add(but16);        p.add(but21);        //кнопка "Назад"        but0.addActionListener(e -> {            sP.removeAll();            if (numbut2 == 1) {                sP.add(but1);                sP.add(but2);                sP.add(but16);                sP.add(but21);                numbut2=0;                numbut=0;            }            if (numbut2 == 2) {                sP.add(but0);                sP.add(but3);                sP.add(but4);                numbut2 = 1;            }            if (numbut2 == 21) {                sP.add(but0);                sP.add(but9);                sP.add(but10);                sP.add(but11);                sP.add(but13);                sP.add(but16);                numbut = 1;                numbut2 = 2;            }            if (numbut2 == 3) {                sP.add(but0);                sP.add(but5);                sP.add(but6);                sP.add(but7);                sP.add(but8);                numbut2 = 1;            }            if (numbut2 == 4) {                sP.add(but0);                sP.add(but9);                sP.add(but17);                sP.add(but10);                sP.add(but18);                sP.add(but19);                sP.add(but20);                numbut2 = 1;            }            if (numbut2 == 24) {                sP.add(but0);                sP.add(but9);                sP.add(but10);                sP.add(but11);                sP.add(but15);                sP.add(but16);                numbut = 4;                numbut2 = 3;            }            if (numbut2 == 5) {                sP.add(but0);                sP.add(but1);                sP.add(but2);                sP.add(but10);                fig_to_move = 0;                numbut2 = 4;            }            if (numbut2 == 6) {                sP.add(but0);                sP.add(but22);                sP.add(but23);                numbut2 = 1;            }            sP.revalidate();            sP.repaint();//            System.out.println("numbut = " + numbut);//            System.out.println("numbut2 = " + numbut2);        });        //кнопка "Окружности"        but1.addActionListener(e -> {            if (numbut==7) {                numbut2 = 5;                fig_to_move = 1;                sP.removeAll();                sP.add(but0);                sP.add(but10);                sP.add(but13);                JOptionPane.showMessageDialog(f,"Перемещение только для Окружностей и Эллипсов");                f.setFocusable(true);                f.requestFocus();            }            else {                sP.removeAll();                sP.add(but0);                sP.add(but3);                sP.add(but4);                numbut2 = 1;            }            sP.revalidate();            sP.repaint();        });        //кнопка "Четырехугольники"        but2.addActionListener(e -> {            if (numbut==7) {                numbut2 = 5;                fig_to_move = 2;                sP.removeAll();                sP.add(but0);                sP.add(but10);                sP.add(but15);                JOptionPane.showMessageDialog(f,"Перемещение только для Четырехугольников");                f.setFocusable(true);                f.requestFocus();            }            else {                sP.removeAll();                sP.add(but0);                sP.add(but5);                sP.add(but6);                sP.add(but7);                sP.add(but8);                numbut2 = 1;            }            sP.revalidate();            sP.repaint();        });        //кнопка "Окружность"        but3.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but10);            sP.add(but11);            sP.add(but13);            sP.add(but16);            numbut = 1;            numbut2 = 2;            sP.revalidate();            sP.repaint();        });        //кнопка "Эллипс"        but4.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but10);            sP.add(but11);            sP.add(but14);            numbut = 2;            numbut2 = 2;            sP.revalidate();            sP.repaint();        });        //кнопка "Четырехугольник"        but5.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but10);            sP.add(but11);            numbut = 3;            numbut2 = 3;            sP.revalidate();            sP.repaint();        });        //кнопка "Прямоугольник"        but6.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but10);            sP.add(but11);            sP.add(but15);            sP.add(but16);            numbut = 4;            numbut2 = 3;            sP.revalidate();            sP.repaint();        });        //кнопка "Ромб"        but7.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but10);            sP.add(but11);            sP.add(but15);            numbut = 5;            numbut2 = 3;            sP.revalidate();            sP.repaint();        });        //кнопка "Трапециия"        but8.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but10);            sP.add(but11);            sP.add(but15);            numbut = 6;            numbut2 = 3;            sP.revalidate();            sP.repaint();        });        //кнопка "Создать"        but9.addActionListener(e -> {            if (numbut == 1) {                if (circle == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 300);                    ch3 = (int) (Math.random() * 200);                    circle = new TCircle(ch1, ch2, ch3, Color.BLACK);                    ((TCircle) circle).Show();                    cP.add(circle, BorderLayout.CENTER);                    cP.revalidate();                } else {                    JOptionPane.showMessageDialog(f, "Окружность уже нарисована");                }            }            else if (numbut == 11) {                if (circles == null) {                    circles = new TCircle[10];                    for (int i=0; i<10; i++) {                        ch1 = (int) (Math.random() * 300);                        ch2 = (int) (Math.random() * 300);                        ch3 = (int) (Math.random() * 300);                        circles[i] = new TCircle (ch1, ch2, ch3, Color.GREEN);                        System.out.println("Circle №" + (i+1) + " координаты центра:: " + ch1 +", "+ ch2 +", диаметр:"+ ch3);                        circles[i].Show();                        cP.add(circles[i], BorderLayout.CENTER);                        cP.validate();                        cP.repaint();                    }                    cP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей уже создан");                }            }            else if (numbut == 2) {                if (ellipse == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 300);                    ch3 = (int) (Math.random() * 200);                    ch4 = (int) (Math.random() * 100);                    ellipse = new TEllipse(ch1, ch2, ch3, ch4, Color.RED);                    ((TEllipse) ellipse).Show();                    cP.add(ellipse, BorderLayout.CENTER);                    cP.revalidate();                } else {                    JOptionPane.showMessageDialog(f, "Эллипс уже нарисован");                }            }            else if (numbut == 3) {                if (quadrangle == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = (int) (Math.random() * 500);                    ch4 = (int) (Math.random() * 500);                    ch5 = (int) (Math.random() * 500);                    ch6 = (int) (Math.random() * 500);                    ch7 = (int) (Math.random() * 500);                    ch8 = (int) (Math.random() * 500);                    quadrangle = new TQuadrangle(ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8, Color.BLACK);                    ((TQuadrangle) quadrangle).Show();                    cP.add(quadrangle, BorderLayout.CENTER);                    cP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Четырехугольник уже нарисован");                }            }            else if (numbut == 4) {                if (rectangle == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    rectangle = new TRectangle(ch1, ch2, ch3, ch4, Color.BLUE);                    ((TRectangle) rectangle).Show();                    cP.add(rectangle, BorderLayout.CENTER);                    cP.revalidate();                } else {                    JOptionPane.showMessageDialog(f, "Прямоугольник уже нарисован");                }            }            else if (numbut == 14) {                if (rectangles == null) {                    rectangles = new TRectangle[10];                    for (int i=0; i<10; i++) {                        ch1 = (int) (Math.random() * 300);                        ch2 = (int) (Math.random() * 300);                        ch3 = (int) (Math.random() * 300);                        ch4 = (int) (Math.random() * 300);                        rectangles[i] = new TRectangle (ch1, ch2, ch3, ch4, Color.RED);                        System.out.println("Rectangle №" + (i+1));                        rectangles[i].Show();                        cP.add(rectangles[i], BorderLayout.CENTER);                        cP.validate();                        cP.repaint();                    }                    cP.revalidate();                }            }            else if (numbut == 5) {                if (romb == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    romb = new TRomb(ch1, ch2, ch3, ch4, Color.CYAN);                    ((TRomb) romb).Show();                    cP.add(romb, BorderLayout.CENTER);                    cP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб уже нарисован");                }            }            else if (numbut == 6) {                if (trapeze == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    ch5 = 10 + (int) (Math.random() * 50);                    trapeze = new TTrapeze(ch1, ch2, ch3, ch4, ch5, Color.GREEN);                    ((TTrapeze) trapeze).Show();                    cP.add(trapeze, BorderLayout.CENTER);                    cP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция уже нарисована");                }            }            else if (numbut == 7) {                if (massive == null) {                    massive = new TFigure[30];                    for (i=0; i<30; i++) {                        // ch1 == 1 -> Окружность                        // ch1 == 2 -> Эллипс                        // ch1 == 3 -> Четырехугольник                        // ch1 == 4 -> Прямоугольник                        // ch1 == 5 -> Ромб                        // ch1 == 6 -> Трапециия                        ch1 = 1 + (int) (Math.random() * 6);                        if (ch1 == 1) {                            System.out.println("Фигура массива №" + (i+1) + " - Окружность");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 300);                            ch3 = (int) (Math.random() * 200);                            massive[i] = new TCircle(ch1, ch2, ch3, Color.BLACK);                        }                        else  if (ch1 == 2) {                            System.out.println("Фигура массива №" + (i+1) + " - Эллипс");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 300);                            ch3 = (int) (Math.random() * 200);                            ch4 = (int) (Math.random() * 100);                            massive[i] = new TEllipse(ch1, ch2, ch3, ch4, Color.RED);                        }                        else  if (ch1 == 3) {                            System.out.println("Фигура массива №" + (i+1) + " - Четырехугольник");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = (int) (Math.random() * 500);                            ch4 = (int) (Math.random() * 500);                            ch5 = (int) (Math.random() * 500);                            ch6 = (int) (Math.random() * 500);                            ch7 = (int) (Math.random() * 500);                            ch8 = (int) (Math.random() * 500);                            massive[i] = new TQuadrangle(ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8, Color.BLACK);                        }                        else  if (ch1 == 4) {                            System.out.println("Фигура массива №" + (i+1) + " - Прямоугольник");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            massive[i] = new TRectangle(ch1, ch2, ch3, ch4, Color.BLUE);                        }                        else  if (ch1 == 5) {                            System.out.println("Фигура массива №" + (i+1) + " - Ромб");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            massive[i] = new TRomb(ch1, ch2, ch3, ch4, Color.CYAN);                        }                        else  if (ch1 == 6) {                            System.out.println("Фигура массива №" + (i+1) + " - Трапециия");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            ch5 = 10 + (int) (Math.random() * 50);                            massive[i] = new TTrapeze(ch1, ch2, ch3, ch4, ch5, Color.GREEN);                        }                    }                    JOptionPane.showMessageDialog(f, "Создан Массив из " + (i) + " фигур");                } else {                    JOptionPane.showMessageDialog(f, "Массив уже создан");                }                f.setFocusable(true);                f.requestFocus();            }            else if (numbut == 8) {                if (MassCont == null) {                    MassCont = new ContMassive();                    counterMassive += 15 + (int) (Math.random()*10);                    System.out.println("counterMassive = " + counterMassive);                    for (int j = 0; j < counterMassive; j++ ) {                        ch1 = 1 + (int) (Math.random() * 6);                        if (ch1 == 1) {                            System.out.println("Фигура Контейнера-Массива №" + (j+1) + " - Окружность");                            MassCont.Iterrator(j, 1);                        }                        else  if (ch1 == 2) {                            System.out.println("Фигура Контейнера-Массива №" + (j+1) + " - Эллипс");                            MassCont.Iterrator(j, 2);                        }                        else  if (ch1 == 3) {                            System.out.println("Фигура Контейнера-Массива №" + (j+1) + " - Четырехугольник");                            MassCont.Iterrator(j, 3);                        }                        else  if (ch1 == 4) {                            System.out.println("Фигура Контейнера-Массива №" + (j+1) + " - Прямоугольник");                            MassCont.Iterrator(j, 4);                        }                        else  if (ch1 == 5) {                            System.out.println("Фигура Контейнера-Массива №" + (j+1) + " - Ромб");                            MassCont.Iterrator(j, 5);                        }                        else  if (ch1 == 6) {                            System.out.println("Фигура Контейнера-Массива №" + (j+1) + " - Трапециия");                            MassCont.Iterrator(j, 6);                        }                    }                    if (text != null) {                        cP.remove(text);                        text = null;                    }                    text = new JLabel("Создан Контейнер-Массив из " + counterMassive + " элементов");                    cP.add(text, BorderLayout.SOUTH);                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе массива уже создан");                }                f.setFocusable(true);                f.requestFocus();            }            else if (numbut == 9) {                if (ListCont == null) {                    ListCont = new ContList();                    counterList += 15 + (int) (Math.random()*10);                    System.out.println("counterList = " + counterList);                    for (int j = 0; j < counterList; j++ ) {                        ch1 = 1 + (int) (Math.random() * 6);                        if (ch1 == 1) {                            System.out.println("Фигура Контейнер-Списка №" + (j+1) + " - Окружность");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 300);                            ch3 = (int) (Math.random() * 200);                            ListCont.addFigure(j, 1, ch1, ch2, ch3, Color.BLACK);                        }                        else  if (ch1 == 2) {                            System.out.println("Фигура Контейнер-Списка №" + (j+1) + " - Эллипс");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 300);                            ch3 = (int) (Math.random() * 200);                            ch4 = (int) (Math.random() * 100);                            ListCont.addFigure(j, 2,ch1, ch2, ch3, ch4, Color.RED);                        }                        else  if (ch1 == 3) {                            System.out.println("Фигура Контейнер-Списка №" + (j+1) + " - Четырехугольник");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = (int) (Math.random() * 500);                            ch4 = (int) (Math.random() * 500);                            ch5 = (int) (Math.random() * 500);                            ch6 = (int) (Math.random() * 500);                            ch7 = (int) (Math.random() * 500);                            ch8 = (int) (Math.random() * 500);                            ListCont.addFigure(j,3,ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8, Color.BLACK);                        }                        else  if (ch1 == 4) {                            System.out.println("Фигура Контейнер-Списка №" + (j+1) + " - Прямоугольник");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            ListCont.addFigure(j,4,ch1, ch2, ch3, ch4, Color.BLUE);                        }                        else  if (ch1 == 5) {                            System.out.println("Фигура Контейнер-Списка №" + (j+1) + " - Ромб");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            ListCont.addFigure(j,5,ch1, ch2, ch3, ch4, Color.CYAN);                        }                        else  if (ch1 == 6) {                            System.out.println("Фигура Контейнер-Списка №" + (j+1) + " - Трапециия");                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            ch5 = 10 + (int) (Math.random() * 50);                            ListCont.addFigure(j,6,ch1, ch2, ch3, ch4, ch5, Color.GREEN);                        }                    }                    if (text != null) {                        cP.remove(text);                        text = null;                    }                    text = new JLabel("Создан Контейнер-Список из " + counterList + " элементов");                    cP.add(text, BorderLayout.SOUTH);                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе списка уже создан");                }            }            ch1 = ch2 = ch3 = ch4 = ch5 = ch6 = ch7 = ch8 = 0;        });        //кнопка "Переместить"        but10.addActionListener(e -> {            ch1 = -30 + (int) (Math.random() * 100);            ch2 = -30 + (int) (Math.random() * 100);            if (numbut == 1) {                if (circle != null) {                    ((TCircle) circle).MoveTo(ch1, ch2);                    cP.add(circle, BorderLayout.CENTER);                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Окружность не найдена");                }            }            else if (numbut == 11) {                if (circles != null) {                    for (int i=0; i<10; i++) {                        circles[i].MoveTo(ch1, ch2);                        circles[i].Show();                        cP.repaint();                        System.out.println("перемещение Окружности №" + (i+1));                    }                    cP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Массив окружностей не найден");                }            }            else if (numbut == 2) {                if (ellipse  != null) {                    ((TEllipse) ellipse ).MoveTo(ch1, ch2);                    cP.add(ellipse , BorderLayout.CENTER);                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Эллипс не найден");                }            }            else if (numbut == 3) {                if (quadrangle != null) {                    ((TQuadrangle) quadrangle).MoveTo(ch1,ch2);                    cP.add(quadrangle, BorderLayout.CENTER);                    cP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Четырехугольник не найден");                }            }            else if (numbut == 4) {                if (rectangle != null) {                    ((TRectangle) rectangle).MoveTo(ch1, ch2);                    cP.add(rectangle, BorderLayout.CENTER);                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Прямоугольник не найден");                }            }            else if (numbut == 14) {                if (rectangles != null) {                    for (int i=0; i<10; i++) {                        rectangles[i].MoveTo(ch1, ch2);                        rectangles[i].Show();                        cP.repaint();                        System.out.println("перемещение Прямоугольника №" + (i+1));                    }                    cP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Прямоугольников не найден");                }            }            else if (numbut == 5) {                if (romb != null) {                    ((TRomb) romb).MoveTo(ch1,ch2);                    cP.add(romb, BorderLayout.CENTER);                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб не найден");                }            }            else if (numbut == 6) {                if (trapeze != null) {                    ((TTrapeze) trapeze).MoveTo(ch1,ch2);                    cP.add(trapeze, BorderLayout.CENTER);                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция не найдена");                }            }            else if (numbut == 7) {                MoveMassive(ch1, ch2);            }            else if (numbut == 8) {                if (MassCont != null) {                    System.out.println("перемещение MassCont");                    for (int j = 0; j < i; j++) {                        MassCont.MoveTo(j, ch1, ch2);//                        MassCont.Show(j);                        cP.add(MassCont.getFigureFromContMass(j), BorderLayout.CENTER);                        cP.validate();//                        cP.repaint();                    }                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f,"Фигуры не найдены");                }            }            else if (numbut == 9) {                if (ListCont != null) {                    System.out.println("перемещение ListCont");                    for (int j = 0; j < iL; j++) {                        ListCont.MoveTo(j,ch1,ch2);                        ListCont.Show(j);                        cP.add(ListCont.getFigureFromContList(j), BorderLayout.CENTER);                        cP.repaint();                    }                    cP.revalidate();//                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f,"Фигуры не найдены");                }            }            ch1 = ch2 = 0;        });        //кнопка "Удалить"        but11.addActionListener(e -> {            if (numbut == 1) {                if (circle != null) {                    cP.remove(circle);//                    ((TCircle) circle).Set(0);                    circle = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Окружность не найдена");                }            }            else if (numbut == 11) {                if (circles != null) {                    for (int i=0; i<10; i++) {                        cP.remove(circles[i]);//                        circles[i].Show(false);                    }                    circles = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей не найден");                }            }            else if (numbut == 2) {                if (ellipse  != null) {                    cP.remove(ellipse);//                    ((TEllipse) ellipse ).Set(0);                    ellipse  = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Эллипс не найден");                }            }            else if (numbut == 3) {                if (quadrangle != null) {                    cP.remove(quadrangle);//                    ((TQuadrangle) quadrangle).Set(0);                    quadrangle = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Четырехугольник не найден");                }            }            else if (numbut == 4) {                if (rectangle != null) {                    cP.remove(rectangle);//                    ((TRectangle) rectangle).Set(0);                    rectangle = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Прямоугольник не найден");                }            }            else if (numbut == 14) {                if (rectangles != null) {                    for (int i=0; i<10; i++) {                        cP.remove(rectangles[i]);//                        rectangles[i].Show(false);                    }                    rectangles = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Прямоугольников не найден");                }            }            else if (numbut == 5) {                if (romb != null) {                    cP.remove(romb);//                    ((TRomb) romb).Set(0);                    romb = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб не найден");                }            }            else if (numbut == 6) {                if (trapeze != null) {                    cP.remove(trapeze);//                    ((TTrapeze) trapeze).Set(0);                    trapeze = null;                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция не найдена");                }            }        });        //кнопка "Изменить радиус"        but13.addActionListener(e -> {            ch1 = 50 + (int) (Math.random() * 150);            //для одиночной окружности            if (numbut == 1) {                if (circle != null) {                    ((TCircle) circle).chRad(ch1);                    ((TCircle) circle).Show();                    cP.add(circle, BorderLayout.CENTER);                    cP.revalidate();                    cP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Окружность не найдена");                }            }            //для массива окружностей            else if (numbut == 11) {                if (circles != null) {                    for (int i = 0; i < 10; i++) {                        ch1 = 50 + (int) (Math.random() * 150);                        circles[i].chRad(ch1);                        circles[i].Show();                    }                    cP.revalidate();                    cP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей не создан");                }            }            //для окружностей из массива            else if (numbut == 7) {                if (massive != null) {                    for (int j = 0; j < 30; j++) {                        if (massive[j] instanceof TCircle) {                            ((TCircle) massive[j]).chRad(ch1);                        }                    }                    for (int t = 0; t < i; t++) {                        if (massive[t] instanceof TCircle) {                            cP.add(massive[t], BorderLayout.CENTER);                        }                    }                    cP.revalidate();                    cP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }                f.setFocusable(true);                f.requestFocus();            }            ch1 = 0;        });        //кнопка ""Повернуть на 90""        but14.addActionListener(e -> {            if (ellipse  != null) {                ((TEllipse) ellipse ).Turn();                ((TEllipse) ellipse ).Show();                cP.add(ellipse , BorderLayout.CENTER);                cP.revalidate();                cP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Эллипс не найден");            }        });        //кнопка "Изменить размер"        but15.addActionListener(e -> {            ch1 = -25 + (int) (Math.random() * 50);            ch2 = -25 + (int) (Math.random() * 50);            //для одиночного четырехугольника            if (numbut == 3) {                if (quadrangle != null) {                    ((TQuadrangle) quadrangle).chSize(ch1, ch2);                    ((TQuadrangle) quadrangle).Show();                    cP.add(quadrangle, BorderLayout.CENTER);                    cP.revalidate();                    cP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Четырехугольник не найден");                }            }            //для одиночного прямоугольника            if (numbut == 4) {                if (rectangle != null) {                    ((TRectangle) rectangle).chSize(ch1, ch2);                    ((TRectangle) rectangle).Show();                    cP.add(rectangle, BorderLayout.CENTER);                    cP.revalidate();                    cP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Прямоугольник не найден");                }            }            //для массива прямоугольников            else if (numbut == 14) {                if (rectangles != null) {                    for (int i = 0; i < 10; i++) {                        rectangles[i].chSize(ch1, ch2);                        rectangles[i].Show();                    }                    cP.revalidate();                    cP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей не создан");                }            }            //для одиночного ромба            else if (numbut == 5) {                if (romb != null) {                    ((TRomb) romb).chSize(ch1, ch2);                    ((TRomb) romb).Show();                    cP.add(romb, BorderLayout.CENTER);                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб не найден");                }            }            //для одиночной трапеции            else if (numbut == 6) {                if (trapeze != null) {                    ((TTrapeze) trapeze).chSize(ch1, ch2);                    ((TTrapeze) trapeze).Show();                    cP.add(trapeze, BorderLayout.CENTER);                    cP.revalidate();                    cP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция не найдена");                }            }            //для четырехугольников из массива            else if (numbut == 7) {                if (massive != null) {                    for (int j = 0; j < 30; j++) {                        if (massive[j] instanceof TQuadrangle) {                            ((TQuadrangle) massive[j]).chSize(ch1,ch2);                        }                    }                    for (int t = 0; t < i; t++) {                        if (massive[t] instanceof TQuadrangle) {                            cP.add(massive[t], BorderLayout.CENTER);                        }                    }                    cP.revalidate();                    cP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }                f.setFocusable(true);                f.requestFocus();            }            ch1 = ch2 = 0;        });        //"Массив"        but16.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            if (numbut == 1) {                sP.add(but10); sP.add(but11); sP.add(but13); numbut = 11; numbut2 = 21;                JOptionPane.showMessageDialog(f, "Следующие действия будут выполнены для массива окружностей");            }            else if (numbut == 4) {                sP.add(but10); sP.add(but11); sP.add(but15); numbut = 14; numbut2 = 24;                JOptionPane.showMessageDialog(f, "Следующие действия будут выполнены для массива прямоугольников");            }            else{                sP.add(but17);                sP.add(but10);                sP.add(but18);                sP.add(but19);                sP.add(but20);                numbut = 7;                numbut2 = 1;            }            sP.revalidate();            sP.repaint();        });        //"Показать"        but17.addActionListener(e -> {            if (numbut == 7) {                if (massive != null) {                    for (int i=0; i<30; i++) {                        ((TFigure) massive[i]).Show();                        cP.add(massive[i], BorderLayout.CENTER);                        if (i > 0) {  cP.remove(text); }                        text = null; text = new JLabel("Показано " + (i + 1) + "/30 фигур массива");                        cP.add(text, BorderLayout.SOUTH);                        cP.validate();                        cP.revalidate();                        cP.repaint();                    }                    JOptionPane.showMessageDialog(f, "Все фигуры массива показаны");                } else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }                f.setFocusable(true);                f.requestFocus();            }            else if (numbut == 8) {                if (MassCont != null) {//                    System.out.println("i="+i+" counterMassive="+counterMassive);                    for (i=0; i<counterMassive; i++) {                        MassCont.Show(i);                        cP.add(MassCont.getFigureFromContMass(i), BorderLayout.CENTER);                        if (text != null) { cP.remove(text); text = null; }                        text = new JLabel("Показано " + (i+1) + "/" + counterMassive + " фигур контейнера-массива");                        cP.add(text, BorderLayout.SOUTH);                        cP.validate();                        cP.revalidate();                        cP.repaint();                    }                } else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе массива не создан");                }            }            else if (numbut == 9) {                if (ListCont != null) {//                    System.out.println("iL="+iL+" counterList=" + counterList);                    for (iL=0; iL<counterList; iL++) {                        ListCont.Show(iL);                        cP.add(ListCont.getFigureFromContList(iL), BorderLayout.CENTER);                        if (text != null) { cP.remove(text); text = null; }                        text = new JLabel("Показано " + (iL+1) + "/" + counterList + " фигур контейнера-списка");                        cP.add(text, BorderLayout.SOUTH);                        cP.validate();                        cP.revalidate();                        cP.repaint();                    }                }  else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе списка не создан");                }            }        });        //"Стереть"        but18.addActionListener(e -> {            if (numbut == 7) {                if (massive != null) {                    for (int i = 0; i < 30; i++) {                        cP.remove(massive[i]);                    }                    cP.remove(text);                    cP.revalidate();                    cP.repaint();                    i = 0;                    text = null;                    JOptionPane.showMessageDialog(f,"Фигуры массива стерты, но объекты не уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }                f.setFocusable(true);                f.requestFocus();            }            else if (numbut == 8) {                if (MassCont != null) {                    if (text != null) {                        for (int i = 0; i < counterMassive; i++) {                            cP.remove(MassCont.getFigureFromContMass(i));                        }                        cP.remove(text);                        cP.revalidate();                        cP.repaint();                        i = 0;                        text = null;                    }                    JOptionPane.showMessageDialog(f,"Фигуры контейнера-массива стерты, но объекты не уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер-Массив не создан");                }            }            else if (numbut == 9) {                if (ListCont != null) {                    if (text != null) {                        for (int i = 0; i < counterList; i++) {                            cP.remove(ListCont.getFigureFromContList(i));                        }                        cP.remove(text);                        cP.revalidate();                        cP.repaint();                        iL = 0;                        text = null;                    }                    JOptionPane.showMessageDialog(f,"Фигуры контейнера-списка стерты, но объекты не уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер-Список не создан");                }            }        });        //"Уничтожить"        but19.addActionListener(e -> {            if (numbut == 7) {                if (massive != null) {                    if (text != null) {                        for (int i = 0; i < 30; i++) {                            cP.remove(massive[i]);                        }                        cP.remove(text);                        cP.revalidate();                        cP.repaint();                        i = 0;                        text = null;                    }                    massive = null;                    JOptionPane.showMessageDialog(f, "Фигуры массива стерты, а соответствующие объекты уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }                f.setFocusable(true);                f.requestFocus();            }            else if (numbut == 8) {                if (MassCont != null) {                    if (text != null) {                        for (int i =0; i < counterMassive; i++) {                            cP.remove(MassCont.getFigureFromContMass(i));                        }                        cP.remove(text);                        cP.revalidate();                        cP.repaint();                        i=0;                        text = null;                    }                    MassCont = null;                    counterMassive = 0;                    JOptionPane.showMessageDialog(f, "Фигуры контейнера-массива стерты, а соответствующие объекты уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе массива не создан");                }            }            else if (numbut == 9) {                if (ListCont != null) {                    if (text != null) {                        for (int j = 0; j < counterList; j++) {                            cP.remove(ListCont.getFigureFromContList(j));                        }                        cP.remove(text);                        cP.revalidate();                        cP.repaint();                        iL=0;                        text = null;                    }                    ListCont = null;                    counterList = 0;                    JOptionPane.showMessageDialog(f, "Фигуры контейнера-списка стерты, а соответствующие объекты уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе списка не создан");                }            }        });        //"Подиерархии"        but20.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but1);            sP.add(but2);            sP.add(but10);            numbut2 = 4;            sP.revalidate();            sP.repaint();        });        //Контейнер        but21.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but22);            sP.add(but23);            numbut2 = 1;            sP.revalidate();            sP.repaint();        });        //На базе динамического массива        but22.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but17);            sP.add(but24);            sP.add(but10);            sP.add(but18);            sP.add(but19);            numbut = 8;            numbut2 = 6;            sP.revalidate();            sP.repaint();        });        //На базе линейного динамического списка        but23.addActionListener(e -> {            sP.removeAll();            sP.add(but0);            sP.add(but9);            sP.add(but17);            sP.add(but24);            sP.add(but10);            sP.add(but18);            sP.add(but19);            numbut = 9;            numbut2 = 6;            sP.revalidate();            sP.repaint();        });        //Добавить        but24.addActionListener(e -> {            if (numbut == 8) {                if (MassCont == null) {                    MassCont = new ContMassive();                }                ch1 = 1 + (int) (Math.random() * 6);                if (ch1 == 1) {                    MassCont.Iterrator(counterMassive, 1);                } else if (ch1 == 2) {                    MassCont.Iterrator(counterMassive, 2);                } else if (ch1 == 3) {                    MassCont.Iterrator(counterMassive, 3);                } else if (ch1 == 4) {                    MassCont.Iterrator(counterMassive, 4);                } else if (ch1 == 5) {                    MassCont.Iterrator(counterMassive, 5);                } else if (ch1 == 6) {                    MassCont.Iterrator(counterMassive, 6);                }                counterMassive++;                if (text != null) {                    cP.remove(text);                    text = null;                }                text = new JLabel("Показано " + (i) + "/" + counterMassive + " фигур из контейнера-массива");                cP.add(text, BorderLayout.SOUTH);                cP.revalidate();                cP.repaint();            }            else if (numbut == 9) {                if (ListCont == null) { ListCont= new ContList(); }                ch1 = 1 + (int) (Math.random() * 6);                if (ch1 == 1) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 300);                    ch3 = (int) (Math.random() * 200);                    ListCont.addFigure(counterList, 1, ch1, ch2, ch3, Color.BLACK);                } else if (ch1 == 2) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 300);                    ch3 = (int) (Math.random() * 200);                    ch4 = (int) (Math.random() * 100);                    ListCont.addFigure(counterList, 2, ch1, ch2, ch3, ch4, Color.RED);                } else if (ch1 == 3) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = (int) (Math.random() * 500);                    ch4 = (int) (Math.random() * 500);                    ch5 = (int) (Math.random() * 500);                    ch6 = (int) (Math.random() * 500);                    ch7 = (int) (Math.random() * 500);                    ch8 = (int) (Math.random() * 500);                    ListCont.addFigure(counterList, 3, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, Color.BLACK);                } else if (ch1 == 4) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    ListCont.addFigure(counterList, 4, ch1, ch2, ch3, ch4, Color.BLUE);                } else if (ch1 == 5) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    ListCont.addFigure(counterList, 5, ch1, ch2, ch3, ch4, Color.CYAN);                } else if (ch1 == 6) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    ch5 = 10 + (int) (Math.random() * 50);                    ListCont.addFigure(counterList, 6, ch1, ch2, ch3, ch4, ch5, Color.GREEN);                }                counterList++;                if (text != null) {                    cP.remove(text);                    text = null;                }                text = new JLabel("Показано " + (iL) + "/" + counterList + " фигур из контейнера-списка");                cP.add(text, BorderLayout.SOUTH);                cP.revalidate();                cP.repaint();            }        });        return p;    }    private void MoveMassive (int dx, int dy) {        //перемещение всех        if (fig_to_move == 0) {            if (massive != null) {                for (int j = 0; j < 30; j++) {                    ((TFigure) massive[j]).MoveTo(dx, dy);                }                for (int t = 0; t < i; t++) {                    cP.add(massive[t], BorderLayout.CENTER);                }                cP.revalidate();                cP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Массив не создан");            }        }        //перемещение окружностей        else  if (fig_to_move == 1) {            if (massive != null) {                for (int j = 0; j < 30; j++) {                    if (massive[j] instanceof TCircle) {                        ((TFigure) massive[j]).MoveTo(dx, dy);                    }                }                for (int t = 0; t < i; t++) {                    if (massive[t] instanceof TCircle) {                        cP.add(massive[t], BorderLayout.CENTER);                    }                }                cP.revalidate();                cP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Массив не создан");            }        }        //перемещение 4хугольников        else  if (fig_to_move == 2) {            if (massive != null) {                for (int j = 0; j < 30; j++) {                    if (massive[j] instanceof TQuadrangle) {                        ((TFigure) massive[j]).MoveTo(dx, dy);                    }                }                for (int t = 0; t < i; t++) {                    if (massive[t] instanceof TQuadrangle) {                        cP.add(massive[t], BorderLayout.CENTER);                    }                }                cP.revalidate();                cP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Массив не создан");            }        }        else {            JOptionPane.showMessageDialog(f, "Фигуры не найдены");        }        f.setFocusable(true);        f.requestFocus();    }    public static void main (String[] argc) {        SwingUtilities.invokeLater(Start::new);    }}